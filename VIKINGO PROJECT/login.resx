<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAyMjJmMjIy1TMzM9czMzPXMzMzlgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAzMzOWMzMz1zMzM9cyMjLVMjIyZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAADIyMtUzMzP/MzMz/zMzM/8zMzP/LS0tEQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAALy8vEDMzM/8zMzP/MzMz/zMzM/8yMjLVAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAEMzMzVTMzM1oAAAAAMzMz1zMzM/8zMzP/MzMz/zMzM/8oKCgTAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoKCgTMzMz/zMzM/8zMzP/MzMz/zMzM9cAAAAAMzMzWjMz
        M1UAAAAEAAAAAAAAAAAAAAAAAAAAADExMXEzMzP/MzMz6wAAAAAzMzPXMzMz/zMzM/8zMzP/MzMz/ygo
        KBMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgoKBMzMzP/MzMz/zMzM/8zMzP/MzMz1wAA
        AAAzMzPrMzMz/zExMXEAAAAAAAAAAAAAAAAAAAAAMjIyiTMzM/8zMzPrAAAAADMzM9czMzP/MzMz/zMz
        M/8zMzP/KCgoEwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgoEzMzM/8zMzP/MzMz/zMz
        M/8zMzPXAAAAADMzM+szMzP/MjIyiQAAAAAAAAAAAAAAAAAAAAAyMjKJMzMz/zMzM+sAAAAAMzMz1zMz
        M/8zMzP/MzMz/zMzM/8oKCgTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoKCgTMzMz/zMz
        M/8zMzP/MzMz/zMzM9cAAAAAMzMz6zMzM/8yMjKJAAAAAAAAAAAAAAAAAAAAADIyMokzMzP/MzMz6wAA
        AAAzMzPXMzMz/zMzM/8zMzP/MzMz/ygoKBMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgo
        KBMzMzP/MzMz/zMzM/8zMzP/MzMz1wAAAAAzMzPrMzMz/zIyMokAAAAAAAAAAAAAAAAAAAAAMjIyiTMz
        M/8zMzPrAAAAADMzM9czMzP/MzMz/zMzM/8zMzP/KCgoEwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAKCgoEzMzM/8zMzP/MzMz/zMzM/8zMzPXAAAAADMzM+szMzP/MjIyiQAAAAAAAAAAMzMzDzAw
        MDoxMTGkMzMz/zMzM+sAAAAAMzMz1zMzM/8zMzP/MzMz/zMzM/8wMDBJMDAwOjAwMDowMDA6MDAwOjAw
        MDowMDA6MDAwOjAwMDowMDBJMzMz/zMzM/8zMzP/MzMz/zMzM9cAAAAAMzMz6zMzM/8xMTGkMDAwOjMz
        Mw8yMjLWMzMz/zMzM/8zMzP/MzMz6wAAAAAzMzPXMzMz/zMzM/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMz
        M/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMzM/8zMzP/MzMz1wAAAAAzMzPrMzMz/zMz
        M/8zMzP/MjIy1jMzM/8zMzP/MzMz/zMzM/8zMzPrAAAAADMzM9czMzP/MzMz/zMzM/8zMzP/MzMz/zMz
        M/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMzM/8zMzPXAAAAADMz
        M+szMzP/MzMz/zMzM/8zMzP/MjIy7TMzM/8zMzP/MzMz/zMzM+sAAAAAMzMz1zMzM/8zMzP/MzMz/zMz
        M/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMzM/8zMzP/MzMz/zMz
        M9cAAAAAMzMz6zMzM/8zMzP/MzMz/zIyMu0zMzMyMjIydDIyMr8zMzP/MzMz6wAAAAAzMzPXMzMz/zMz
        M/8zMzP/MzMz/zIyMn8yMjJ1MjIydTIyMnUyMjJ1MjIydTIyMnUyMjJ1MjIydTIyMn8zMzP/MzMz/zMz
        M/8zMzP/MzMz1wAAAAAzMzPrMzMz/zIyMr8yMjJ0MzMzMgAAAAAAAAAAMjIyiTMzM/8zMzPrAAAAADMz
        M9czMzP/MzMz/zMzM/8zMzP/KCgoEwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCgoEzMz
        M/8zMzP/MzMz/zMzM/8zMzPXAAAAADMzM+szMzP/MjIyiQAAAAAAAAAAAAAAAAAAAAAyMjKJMzMz/zMz
        M+sAAAAAMzMz1zMzM/8zMzP/MzMz/zMzM/8oKCgTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAoKCgTMzMz/zMzM/8zMzP/MzMz/zMzM9cAAAAAMzMz6zMzM/8yMjKJAAAAAAAAAAAAAAAAAAAAADIy
        MokzMzP/MzMz6wAAAAAzMzPXMzMz/zMzM/8zMzP/MzMz/ygoKBMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAACgoKBMzMzP/MzMz/zMzM/8zMzP/MzMz1wAAAAAzMzPrMzMz/zIyMokAAAAAAAAAAAAA
        AAAAAAAAMjIyiTMzM/8zMzPrAAAAADMzM9czMzP/MzMz/zMzM/8zMzP/KCgoEwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAKCgoEzMzM/8zMzP/MzMz/zMzM/8zMzPXAAAAADMzM+szMzP/MjIyiQAA
        AAAAAAAAAAAAAAAAAAAxMTGAMzMz/zMzM+sAAAAAMzMz1zMzM/8zMzP/MzMz/zMzM/8oKCgTAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoKCgTMzMz/zMzM/8zMzP/MzMz/zMzM9cAAAAAMzMz6zMz
        M/8xMTGAAAAAAAAAAAAAAAAAAAAAADAwMBUxMTGPMzMzkQAAAAAzMzPXMzMz/zMzM/8zMzP/MzMz/ygo
        KBMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgoKBMzMzP/MzMz/zMzM/8zMzP/MzMz1wAA
        AAAxMTGQMTExjzAwMBUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADMzM9czMzP/MzMz/zMz
        M/8zMzP/KCgoEwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKioqEjMzM/8zMzP/MzMz/zMz
        M/8zMzPXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMTExlTMz
        M/8zMzP/MzMz/zIyMs4AAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMjIyzjMz
        M/8zMzP/MzMz/zMzM5YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAALy8vECgoKBMqKioSAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAACKioqEigoKBMvLy8QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////////////B/4P/wP8D/ED/AjxA/wI8QP
        8CPED/AjxA/wI8QP8CMEAAAgBAAAIAQAACAEAAAgBAAAIMQP8CPED/AjxA/wI8QP8CPED/AjxA/wI/wP
        8D/8D/A//h/4f/////////////////////8=
</value>
  </data>
</root>